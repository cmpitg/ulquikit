---
project_name: Ulquikit
authors: Duong H. Nguyen <cmpitg AT gmailDOTcom>, Hoang Minh Thang <p AT banphimDOTnet>
title: Ulquikit
short_description: Another literate programming tool in Racket
version: 0.0.1
---

# Ulquikit #

This is full documentation and source code about Ulquikit.  Ulquikit is
written using Ulquikit itself.  On how to use Ulquikit in your project, see
[Ulquikit guide](guide.html).

## Introduction ##

Ulquikit started as a collection of Ruby scripts to:

* Generate source code from a
  [Markdown](http://en.wikipedia.org/wiki/Markdown) document

* Build software using the generated source code

* Build documentation from Markdown documents

* Build and run tests

Output is one of the following items:

* A single HTML page with styles

* A PDF file

* An ePub file

### Features ###

* **Fully hackable** source code

* [Convention over configuration](http://en.wikipedia.org/wiki/Convention_over_configuration)

* "Visually pleased"

* Output syntax highlighting

* Generated source code has references to original documentation with the
  formats:

  - `/path/to/docs:line_number`
  - `/path/to/docs:line_number_from:line_number_to`
  - `/path/to/docs:line_number:number_of_lines`
  - `/path/to/docs:/pattern/`
  - `/path/to/docs:/pattern_from/,/pattern_to/`

  Editors can make use of this pattern to implement code/doc navigation.

### Requirements ###

* Ruby 1.9+

* Gems:
  - [Rouge](https://github.com/jayferd/rouge), a syntax highlighter for Ruby.
  - [Redcarpet](https://github.com/vmg/redcarpet) for markdown processing.
  - [Nokogiri](http://nokogiri.org/) for HTML/XML processing.

### Notations ###

Aside from usual notation (preformatted text for source code, different text
style for headings and quotes, ...), this document adds a few more notations:

* Concepts that are valid in Ulquikit (and probably have different meanings
  outside) are italicized.

### Concepts ###

<a name="concept"></a>

* *Snippets* refer to *code snippets* that are used to structure source code.
  Each snippet (TODO: for each file? or in the whole project?) has a unique
  name and either:

  - defines a potion of code (refered to as *code snippets*), or
  - defines a file (refered to as *file snippets*)

<a name="concept-source-doc"></a>

* *Source doc* is a literate document that is used to generate source code and
  documentation.

<a name="concept-gen-doc"></a>

* *Generated doc* is the generated documentation from *source doc*.

<a name="concept-gen-code"></a>

* *Generated code* is the generated source code from *source doc*.

### Constraints ###

* Filename contains no space and `:`.

* Snippet name contains no space.

* Snippet names are unique.

* **Note**: if the code might be polluted by the character sequences that are
  used to define snippets, their corresponding regular expressions in config
  should be redefined.

### Configuration ###

* All configuration is managed by a singleton named `UlquiConfig`:

* All configuration is modifiable directly by changing the singleton or by
  placing a YAML file in the `src/` directory.

  ```ruby
  === config-declaration ===
  class UlquiConfigSingleton
    include Singleton

    -{ config-project-structure             }-
    -{ config-define-snippet-regexps        }-
    -{ config-default-template              }-
  end

  UlquiConfig = UlquiConfigSingleton.instance
  ======
  ```

* By default, all regular expressions are defined so that source code part of
  the document looks clean and uncluttered:

  ```ruby
  === config-define-snippet-regexps ===
  attr_accessor :snippet_def_regexp, :file_def_regexp, :snippet_add_regexp

  @snippet_def_regexp = {
    :begin  => /=== ([^ ]+) ===$/,
    :end    => /======$/
  }

  @file_def_regexp = {
    :begin  => /_____ file: ([^ ]+) _____$/,
    :end    => /__________$/
  }

  @snippet_add_regexp = /-{ ([^ ]+) }-$/
  ======
  ```

  *File snippets* has `build_src/` as their default directory.

### The Markdown language ###

Ulquikit supports standard Markdown syntax, and with the help of
[Redcarpet](https://github.com/vmg/redcarpet), it brings additional features
for Markdown documents to have better semantics.

#### Additional features to original Markdown ####

* Named anchor:

  - Standard syntax:

    ```html
    <a name="some-name">Text</a>
    <a name="some-name"></a> Text
    ```

  - Ulquikit syntax:

    ```
    @{some-name}Text
    @{some-name} Text
    ```

  - Ulquikit's escape syntax:

    ```
    '@{some-name}Text
    '@{some-name} Text
    ```

#### How it works ####

* With HTML as Ulquikit's output, it needs a basic template which defines the
  structure of the HTML file.  The template is stored in `src/templates/`
  directory.

* A Markdown processor is used to render the Markdown file as the `<body>` of
  the result.

#### Process ####

* Firstly, Ulquikit determines which template is used for the final single
  HTML file.  If it finds `templates/main.html`, it would read the content of
  that file as its main template; otherwise, simple template is used
  (`@main_template_content`).

  ```ruby
  === config-default-template ===
  attr_accessor :main_template_file, :main_template_content

  @main_template_file = "main.html"

  @main_template_content = File.try_read_file @main_template_content
  @main_template_content = """<!DOCTYPE html>
  <html>
    <head>
      <title>%{title}</title>
      %{css}
    </head>
    <body>
      %{content}
      %{js}
    </body>
  </html>
  """ if @main_template_content == ""
  ======
  ```

* Also, the function to process main template is 

* Ulquikit reads all templates in `src/templates/`.

* Then, all Markdown files are read and rendered using Redcarpet.  Variable
  definition part is parsed and all variables are stored in a hash.


### Directory structure ###

```
<project-name>/
  src/
    images/
    scripts/
    styles/
    templates/
    config/
      custom-commands.rb
      pre-processing.rb
      post-processing.rb
    somefile.md
  COPYING
  README
```

* The above structure is completely configurable (what's the point of being
  fully hackable if it's not? (-:).  However, it's strongly advised not to
  change:

  TODO: Review the following part

  ```ruby
  === config-project-structure ===

  class UlquiConfigSingleton
    attr_accessor :project_structure

    project_structure = {
      :main_dirs => {
        :src          => 'src',
        :build        => 'build',
      }

      :template       => {
        :path         => 'src/templates',
        :default      => 'main.html'
        :action       => Producer.method(:read_template_html)
      }

      :images         => {
        :src          => 'images',
        :output       => 'img'
      },

      :js             => {
        :src          => 'scripts',
        :output       => 'js',
        :action       => Producer.method(:compile_js),
        :file_regexp  => /\.js$/
      },

      :css            => {
        :src          => 'styles',
        :output       => 'css',
        :action       => Producer.method(:compile_css),
        :file_regexp  => /\.css$/
      },

      :md             => {
        :src          => './',
        :output       => './',
        :action       => Producer.method(:compile_md),
        :file_regexp  => /\.(html|pdf|epub)$/
      }

    }
  end
  ======

  ```

### Fragmented: Source code generating process ###

Source code generating process could be described is the flow below:

```ruby
____ file: ./gen_source_code.rb ____

-{ gen-src/requires }

-{ gen-src/extract-snippets    }-
-{ gen-src/inserting-snippets  }-
-{ gen-src/create-files        }-
__________
```

The regular expression for defining file snippet might not look nice, you can
always change it (TODO: Make reference to `file_def_regexp` part).

#### Extracting snippets ####

Snippets are read from all Markdown determine by the list of  `UlquiConfig[:]`

### Custom project structure ###

Useful for projects such an an Emacs Lisp or Racket package, the project structure is
mostly flattened.

Ulquikit supports customizing project structure in your `./config.json` (TODO:
Make reference to the section describing `config.json`) file.

```json
{
  "output-source": "./",
  "output-doc":    "./"
}
```

### Emacs supporting

* Multi-major mode

* Snippets

  ```
  -new-frag
  -new-file
  -add-frag
  ```

* Code navigation based on pattern
