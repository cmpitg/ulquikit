#
# This file is part of Ulquikit project.
#
# Copyright (C) 2013 Duong H. Nguyen <cmpitg AT gmailDOTcom>
#
# Ulquikit is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# Ulquikit is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# Ulquikit.  If not, see <http://www.gnu.org/licenses/>.
#
#
# References:
#    https://github.com/vmg/redcarpet
#

#
# Write docs:
# * [done] Create a dir
# * [done] Remove dirs recursively
# * [done] Check if a file/dir exists
# * [done] Functional-style apply method
# * [done] Glob
#

require_relative 'bootstrap/config'
require_relative 'bootstrap/markdown_renderer'
require 'pygments'

task :clean do
  FileUtils.remove_paths BUILD_SRC_DIR
  FileUtils.remove_paths BUILD_DOCS_DIR
end

task :default => :gen_doc do
  Dir.ensure_dirs BUILD_SRC_DIR, BUILD_DOCS_DIR
  ASSETS.each { |asset|
    Dir.ensure_dirs asset[:destination]
  }
end

task :gen_doc do
  Renderer = RendererSingleton.instance

  Dir.glob("*.md") { |file|
    Renderer::render_file File.basename(file, ".md")
  }
end

# Public: get snippet from the current line. Arguments:
# * line - current line
# * :snippets - current collected snippets
# * :current_snippet - current snippet name
# * :snippet_spaces_length - current padding space at the beginning
def get_snippet (line, opts)
  snippet_def_regex = {
    :begin  => /=== ([^ ]+) ===$/,
    :end    => /======$/
  }

  snippets               = opts[:snippets] || {}
  current_snippet        = opts[:current_snippet] || nil
  snippet_spaces_length  = opts[:snippet_spaces_length] || 0

  case
  when snippet_def_regex[:end] =~ line
    current_snippet = nil

  when snippet_def_regex[:begin] =~ line
    current_snippet        = snippet_def_regex[:begin].match(line)[1].to_sym
    redundant_spaces       = /^( +)[^ ]/.match(line)
    snippet_spaces_length  = redundant_spaces[1].length if redundant_spaces

    snippets[current_snippet] = []
  when current_snippet
    snippets[current_snippet] << (line[snippet_spaces_length..-1])
  end

  {
    :snippets => snippets,
    :current_snippet => current_snippet,
    :snippet_spaces_length => snippet_spaces_length,
  }
end

task :gen_code do
  file_def_regex = {
    :begin  => /_____ file: ([^ ]+) _____$/,
    :end    => /__________$/
  }

  snippet_add_regex = /-{ ([^ ]+) }-$/

  Dir.glob("*.md") { |file|
    content = File.read_file(file)

    snippets               = {}
    current_snippet        = nil
    snippet_spaces_length  = 0

    content.each_line { |line|
      line_without_newline  = line[0..-2]
      updated_snippets      = get_snippet line_without_newline,
                                          :snippets => snippets,
                                          :current_snippet => current_snippet,
                                          :snippet_spaces_length => snippet_spaces_length
      snippets              = updated_snippets[:snippets]
      current_snippet       = updated_snippets[:current_snippet]
      snippet_spaces_length = updated_snippets[:snippet_spaces_length]
    }

    snippets.each { |key, val|
      puts "--- #{key} ---"
      puts val
    }
  }
end

task :gen_pygments_css do
  File.write_file "#{BOOTSTRAP_DIR}/css/pygments.css", Pygments.css
end
